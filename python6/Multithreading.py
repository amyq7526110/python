#!/usr/bin/env python3
# 多线程编程
# 
# 多线程工作原理              多线程编程 

# 多线程的动机                多线程相关模块
# 多线程任务的工作特点        传递函数给Thread类
# 什么是进程                  传递可调用类给Thread类
# 什么是线程                  含有线程的服务器



# 多线程工作原理


# 多线程的动机
# •  在多线程(MT)编程出现之前,电脑程序的运行由
# 一个执行序列组成,执行序列按顺序在主机的中央处
# 理器(CPU)中运行
# •  无论是任务本身要求顺序执行还是整个程序是由多个
# 子任务组成,程序都是按这种方式执行的
# •  即使子任务相互独立,互相无关(即,一个子任务的
# 结果不影响其它子任务的结果)时也是这样
# •  如果并行运行这些相互独立的子任务可以大幅度地提
# 升整个任务的效率

#  多线程任务的工作特点

#  •  它们本质上就是异步的,需要有多个并发事务
#  •  各个事务的运行顺序可以是不确定的,随机的,不可
#  预测的
#  •  这样的编程任务可以被分成多个执行流,每个流都有
#  一个要完成的目标
#  •  根据应用的不同,这些子任务可能都要计算出一个中
#  间结果,用于合并得到最后的结果

#  什么是进程
#  •  计算机程序只不过是磁盘中可执行的、二进制(或其
#  它类型)的数据
#  •  进程(有时被称为重量级进程)是程序的一次执行
#  •  每个进程都有自己的地址空间、内存以及其它记录其
#  运行轨迹的辅助数据
#  •  操作系统管理在其上运行的所有进程,并为这些进程
#  公平地分配时间


#  什么是线程(续1)
#  •  线程一般都是并发执行的,正是由于这种并行和数据
#  共享的机制使得多个任务的合作变为可能
#  •  需要注意的是,在单CPU 的系统中,真正的并发是
#  不可能的,每个线程会被安排成每次只运行一小会,
#  然后就把CPU 让出来,让其它的线程去运行


#  多线程相关模块
#  •  thread和threading模块允许程序员创建和管理线程
#  •  thread模块提供了基本的线程和锁的支持,而
#  threading提供了更高级别、功能更强的线程管理功
#  能
#  •  推荐使用更高级别的threading模块
#  •  只建议那些有经验的专家在想访问线程的底层结构的
#  时候,才使用thread模块





